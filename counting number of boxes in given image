import cv2
import numpy as np

def count_boxes(image_path):
    # Load YOLO model and configuration
    net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
    layer_names = net.getUnconnectedOutLayersNames()

    # Read image
    image = cv2.imread(image_path)
    height, width, _ = image.shape

    # Preprocess image for YOLO
    blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)

    # Get output layer information
    outs = net.forward(layer_names)

    # Get class IDs, confidences, and bounding boxes
    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and class_id == 0:  
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                class_ids.append(class_id)
                confidences.append(float(confidence))
                boxes.append([x, y, w, h])
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    print("Total number of boxes:", len(indices))
image_path = "C:\Users\manoz\Downloads\data\data\Task1 data"
count_boxes(image_path)
